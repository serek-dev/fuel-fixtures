<?php

declare(strict_types=1);

namespace Tests\Unit\Fuel;

use Orm\Model;
use PHPUnit\Framework\TestCase;
use Stwarog\FuelFixtures\Fuel\Factory;
use Stwarog\FuelFixtures\Fuel\FactoryContract;
use Stwarog\FuelFixtures\Fuel\Proxy;
use Tests\Unit\Mocks\ModelImitation;

/** @covers \Stwarog\FuelFixtures\Fuel\Factory */
final class FactoryTest extends TestCase
{
    /** @test */
    public function constructor(): void
    {
        // When initialized
        // Given factory
        $actual = $this->getFactory(ModelImitation::class);

        // Then it should implement FactoryContract
        $this->assertInstanceOf(FactoryContract::class, $actual);
    }

    public function getFactory(string $model): Factory
    {
        return new class($model) extends Factory {
            public function getDefaults(): array
            {
                return [
                    'id' => 'id',
                    'status' => 'status',
                    'body' => 'body',
                ];
            }
        };
    }

    /** @test */
    public function makeOne_NoAttributes_ShouldCreateWithDefaults(): Proxy
    {
        // Given factory
        $factory = $this->getFactory(ModelImitation::class);
        $expected = $factory->getDefaults();

        // When makeOne is called
        $model = $factory->makeOne();
        $actual = $model->to_array();

        // Then defaults should be assigned
        $this->assertSame($expected, $actual);

        return $model;
    }

    /**
     * @test
     * @depends makeOne_NoAttributes_ShouldCreateWithDefaults
     */
    public function makeOne_CreatedModelMustBeInstanceOfProxyAndModel(object $model): void
    {
        $this->assertInstanceOf(Proxy::class, $model);
        $this->assertInstanceOf(Model::class, $model);
    }

    /** @test */
    public function makeOne_AttributesGiven_ShouldMergeWithDefaults(): Proxy
    {
        // Given factory
        $factory = $this->getFactory(ModelImitation::class);
        $factory->getDefaults();
        $attributes = ['id' => 123, 'field' => 'field'];
        $expected = [
            'id' => 123,
            'status' => 'status',
            'body' => 'body',
            'field' => 'field'
        ];

        // When makeOne is called
        $model = $factory->makeOne($attributes);
        $actual = $model->to_array();

        // Then defaults should be overwritten by given attributes
        $this->assertSame($expected, $actual);

        return $model;
    }

    /**
     * @test
     * @return array{FactoryContract, array<Proxy>}
     */
    public function makeMany_NoAttributes_ShouldCreateWithDefaults(): array
    {
        // Given factory
        $factory = $this->getFactory(ModelImitation::class);
        $expected = $factory->getDefaults();

        // When makeMany is called
        $models = $factory->makeMany();

        foreach ($models as $model) {
            $actual = $model->to_array();

            // Then defaults should be assigned to all created models
            $this->assertSame($expected, $actual);
        }

        return [$factory, $models];
    }

    /**
     * @test
     * @param array{FactoryContract, array<Proxy>} $data
     * @depends makeMany_NoAttributes_ShouldCreateWithDefaults
     */
    public function makeMany_NoCountPassed_ShouldCreateFiveModels(array $data): void
    {
        // Given models generated without count param
        [, $models] = $data;
        $expected = 5;
        // Then count should be = 5
        $this->assertCount($expected, $models);
    }

    /**
     * @test
     * @param array{FactoryContract, array<Proxy>} $data
     * @depends makeMany_NoAttributes_ShouldCreateWithDefaults
     */
    public function makeMany_eachMustBeInstanceOfProxyAndModel(array $data): void
    {
        // Given models generated by makeMany
        [, $models] = $data;

        // Then each model must be
        foreach ($models as $model) {
            $this->assertInstanceOf(Proxy::class, $model);
            $this->assertInstanceOf(Model::class, $model);
        }
    }

    /**
     * @test
     * @param array{FactoryContract, array<Proxy>} $data
     * @depends makeMany_NoAttributes_ShouldCreateWithDefaults
     */
    public function makeMany_CountPassed_ShouldCreateGivenCountOfModels(array $data): void
    {
        // Given models generated without count param
        [$factory] = $data;
        $expected = 2;

        // When created
        $models = $factory->makeMany([], $expected);

        // Then count should be = 2
        $this->assertCount($expected, $models);
    }
}
